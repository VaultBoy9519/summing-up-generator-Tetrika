let key = null;
const algo = 'RSA-OAEP';
const crypto = window.crypto.subtle

function generateKey() {
  return window.crypto.subtle.generateKey({ name: algo, modulusLength: 2048, publicExponent: new Uint8Array([0x01, 0x00, 0x01]), hash: { name: 'SHA-256' } }, true, ['encrypt', 'decrypt']);
}

const getKey = () => key ? Promise.resolve(key) : generateKey().then((k) => { key = k; return k });
const bufferize = msg => new Uint32Array(Array.from(JSON.stringify(msg)).map(c => c.charCodeAt(0)));
const debufferize = bfr => JSON.parse(String.fromCharCode.apply(null, new Uint32Array(bfr)));
const importKey = key => crypto.importKey({ name: algo }, 'jwk', JSON.parse(key));
const exportKey = key => crypto.exportKey({ name: algo }, 'jwk', JSON.stringify(key));
const encrypt = msg => getKey().then(k => crypto.encrypt({ name: algo }, k.publicKey, bufferize(msg)))
const decrypt = cipher => getKey().then(k => crypto.decrypt({ name: algo }, k.privateKey, cipher).then(debufferize)

function encrypt(key, msg, name = 'RSA-OAEP') {
  const json = JSON.stringify(msg);
  const bufferView = new Uint32Array(Array.from(json).map(c => c.charCodeAt(0)));
  return window.crypto.subtle.encrypt({ name }, key.publicKey, bufferView);
}

function decrypt(key, msg, name = 'RSA-OAEP') {
  return window.crypto.subtle.decrypt({ name }, key.privateKey, msg).then((buffer) => {
    const json = String.fromCharCode.apply(null, new Uint32Array(buffer));
    return JSON.parse(json);
  });
}

function time(cb) {
  const date = Date.now();
  return cb().then((e) => {
    console.log(Date.now() - date);
    return e;
  });
}

function testEncryption(msg) {
  return time(() => (
    generateKey().then(key => (
      encrypt(key, msg).then(cipher => (
        decrypt(key, cipher)
      ))
    ))
  ));
}

function testEncryption2(msg, key) {
  return time(() => (
    encrypt(key, msg).then(cipher => (
      decrypt(key, cipher)
    ))
  ));
}
